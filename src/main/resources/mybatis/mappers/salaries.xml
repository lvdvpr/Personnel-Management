<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.last.mapper.SalaryMapper"> 

	<!-- 급여계산 --> 
	<select id="getSalaryLists" parameterType="String" resultType="salaryDto">
	 	select
	 		A.BASE_YEAR_MONTH     		as baseYearMonth,
	 		A.BASE_SALARY_TTL     		as baseSalary,
	 		A.OVERTIME_SALARY_TTL		as overtimeSalary,
	 		A.NIGHT_SALARY_TTL			as nightSalary,
	 		A.HOLIDAY_SALARY_TTL		as holidaySalary,
	 		A.CARE_SALARY_TTL			as careSalary,
	 		A.REWARD_SALARY_TTL			as rewardSalary,
	 		A.MEAL_TTL					as mealSalary,
	 		A.BUSINESS_SALARY_TTL		as businessSalary,
	 		A.INCOME_TAX_TTL			as incomeTax,
	 		A.RESIDENCE_TAX_TTL			as residenceTax,
	 		A.PENSION_TTL				as pension,
	 		A.HEALTH_INSURANCE_TTL		as healthInsurance,
	 		A.LONGTERM_INSURANCE_TTL	as longtermInsurance,
	 		A.EMPLOYMENT_INSURANCE_TTL	as employmentInsurance,
	 		A.START_DATE				as startDate,
	 		A.END_DATE					as endDate,
	 		A.PAY_DATE					as payDate,
	 		B.EMPLOYEE_NO				as employeeNo,
	 		B.EMPLOYEE_NAME				as name,
	 		B.HIRE_DATE					as hireDate,
	 		B.RETIREMENT_DATE			as retirementDate,
	 		C.DEPT_NAME					as deptName,
	 		D.POSITION_NAME				as positionName
	 	from
	 		(select * 
		     from SALARY_HISTORIES 
		     <if test="baseYearMonth != null">
		     where BASE_YEAR_MONTH = #{baseYearMonth}
		     </if>
		     ) A , EMPLOYEES B, DEPARTMENTS C, POSITIONS D
	 	<where>
				A.EMPLOYEE_NO(+) = B.EMPLOYEE_NO 
			and
			    B.DEPT_NO = C.DEPT_NO	
			and
			    B.POSITION_NO = D.POSITION_NO	
		 	and 
		 		B.EMPLOYEE_STATUS = 'N'
	 	</where>
	 	order by B.EMPLOYEE_NO asc
	</select>
	
	<!-- 사원의 입력된 급여 정보 가져오기 --> 
	<select id="getCalculatedSalaryDto" parameterType="map" resultType="salaryDto">
	 	select
			A.BASE_YEAR_MONTH     		as baseYearMonth,
	 		A.BASE_SALARY_TTL     		as baseSalary,
	 		A.OVERTIME_SALARY_TTL		as overtimeSalary,
	 		A.NIGHT_SALARY_TTL			as nightSalary,
	 		A.HOLIDAY_SALARY_TTL		as holidaySalary,
	 		A.CARE_SALARY_TTL			as careSalary,
	 		A.REWARD_SALARY_TTL			as rewardSalary,
	 		A.MEAL_TTL					as mealSalary,
	 		A.BUSINESS_SALARY_TTL		as businessSalary,
	 		A.INCOME_TAX_TTL			as incomeTax,
	 		A.RESIDENCE_TAX_TTL			as residenceTax,
	 		A.PENSION_TTL				as pension,
	 		A.HEALTH_INSURANCE_TTL		as healthInsurance,
	 		A.LONGTERM_INSURANCE_TTL	as longtermInsurance,
	 		A.EMPLOYMENT_INSURANCE_TTL	as employmentInsurance,
	 		A.START_DATE				as startDate,
	 		A.END_DATE					as endDate,
	 		A.PAY_DATE					as payDate,
	 		B.EMPLOYEE_NO				as employeeNo,
	 		B.EMPLOYEE_NAME				as name,
	 		B.HIRE_DATE					as hireDate,
	 		B.RETIREMENT_DATE			as retirementDate,
	 		C.DEPT_NAME					as deptName,
	 		D.POSITION_NAME				as positionName
		from
			SALARY_HISTORIES A, EMPLOYEES B, DEPARTMENTS C, POSITIONS D
		where
			A.BASE_YEAR_MONTH = #{baseYearMonth}
		and		
			A.EMPLOYEE_NO = #{employeeNo}
		and
			A.EMPLOYEE_NO = B.EMPLOYEE_NO 
		and
			B.DEPT_NO = C.DEPT_NO	
		and
			B.POSITION_NO = D.POSITION_NO	
	</select>
	
	<!-- 급여내역 없는 사원의 기본정보 가져오기 -->
	<select id="getBasicSalaryInfo" parameterType="map" resultType="BankInfo">
		select
			employee_no		as employeeNo,
			base_salary		as baseSalary,
			overtime_salary	as overtimeSalary,
			night_salary	as nightSalary,
			holiday_salary	as holidaySalary,
			start_date		as startDate,
			end_date		as endDate,
			note			as note
		from
			salary_basic_item_info
		where
			employee_no = #{employeeNo}
		and 
			start_date &lt;= #{baseYearMonth}
		and 
			end_date >= #{baseYearMonth}  	
	</select>
	
	
	<!-- 급여저장 -->
	<insert id="insertSalary" parameterType="salaryDto">
		insert into SALARY_HISTORIES
		(EMPLOYEE_NO, BASE_YEAR_MONTH, BASE_SALARY_TTL, OVERTIME_SALARY_TTL, NIGHT_SALARY_TTL, HOLIDAY_SALARY_TTL, CARE_SALARY_TTL, REWARD_SALARY_TTL, MEAL_TTL,
		BUSINESS_SALARY_TTL, INCOME_TAX_TTL, RESIDENCE_TAX_TTL, PENSION_TTL, HEALTH_INSURANCE_TTL, LONGTERM_INSURANCE_TTL, EMPLOYMENT_INSURANCE_TTL, START_DATE, END_DATE, PAY_DATE)
		values
		(#{employeeNo}, #{baseYearMonth}, #{baseSalary}, #{overtimeSalary}, #{nightSalary}, #{holidaySalary}, #{careSalary}, #{rewardSalary}, #{mealSalary},
		#{businessSalary}, #{incomeTax}, #{residenceTax}, #{pension}, #{healthInsurance}, #{longtermInsurance}, #{employmentInsurance}, #{startDate}, #{endDate}, #{payDate})
	</insert>
	
	<!-- 급여수정 -->
	<update id="updateSalary" parameterType="salaryDto">
		update SALARY_HISTORIES
		set
			BASE_SALARY_TTL = #{baseSalary},
			OVERTIME_SALARY_TTL = #{overtimeSalary}, 
			NIGHT_SALARY_TTL = #{nightSalary}, 
			HOLIDAY_SALARY_TTL = #{holidaySalary}, 
			CARE_SALARY_TTL = #{careSalary}, 
			REWARD_SALARY_TTL = #{rewardSalary}, 
			MEAL_TTL = #{mealSalary},
			BUSINESS_SALARY_TTL = #{businessSalary}, 
			INCOME_TAX_TTL = #{incomeTax}, 
			RESIDENCE_TAX_TTL = #{residenceTax}, 
			PENSION_TTL = #{pension}, 
			HEALTH_INSURANCE_TTL = #{healthInsurance}, 
			LONGTERM_INSURANCE_TTL = #{longtermInsurance}, 
			EMPLOYMENT_INSURANCE_TTL = #{employmentInsurance}, 
			START_DATE = #{startDate}, 
			END_DATE = #{endDate}, 
			PAY_DATE = #{payDate}
		where 
			EMPLOYEE_NO = #{employeeNo}
			and BASE_YEAR_MONTH = #{baseYearMonth}
	</update>
	
	<!-- 급여삭제 -->
	<delete id="deleteSalary">
		delete from 
			SALARY_HISTORIES
	 	where
	 		EMPLOYEE_NO = #{employeeNo}
			and BASE_YEAR_MONTH = #{baseYearMonth}
	</delete>
	
	<!-- 급여조회, 급여대장  --> 
	<select id="getSalaryHistories" parameterType="map" resultType="salaryDto">
	 	select
	 		A.BASE_YEAR_MONTH     		as baseYearMonth,
	 		A.BASE_SALARY_TTL     		as baseSalary,
	 		A.OVERTIME_SALARY_TTL		as overtimeSalary,
	 		A.NIGHT_SALARY_TTL			as nightSalary,
	 		A.HOLIDAY_SALARY_TTL		as holidaySalary,
	 		A.CARE_SALARY_TTL			as careSalary,
	 		A.REWARD_SALARY_TTL			as rewardSalary,
	 		A.MEAL_TTL					as mealSalary,
	 		A.BUSINESS_SALARY_TTL		as businessSalary,
	 		A.INCOME_TAX_TTL			as incomeTax,
	 		A.RESIDENCE_TAX_TTL			as residenceTax,
	 		A.PENSION_TTL				as pension,
	 		A.HEALTH_INSURANCE_TTL		as healthInsurance,
	 		A.LONGTERM_INSURANCE_TTL	as longtermInsurance,
	 		A.EMPLOYMENT_INSURANCE_TTL	as employmentInsurance,
	 		A.START_DATE				as startDate,
	 		A.END_DATE					as endDate,
	 		A.PAY_DATE					as payDate,
	 		B.EMPLOYEE_NO				as employeeNo,
	 		B.EMPLOYEE_NAME				as name,
	 		B.HIRE_DATE					as hireDate,
	 		B.RETIREMENT_DATE			as retirementDate,
	 		C.DEPT_NAME					as deptName,
	 		D.POSITION_NAME				as positionName
	 	from
	 		SALARY_HISTORIES A , EMPLOYEES B, DEPARTMENTS C, POSITIONS D
	 	<where>
				A.EMPLOYEE_NO = B.EMPLOYEE_NO 
			and
			    B.DEPT_NO = C.DEPT_NO	
			and
			    B.POSITION_NO = D.POSITION_NO	
	 		<if test="baseYearMonth != null">
		 		and	A.PAY_DATE like '%' || #{baseYearMonth} || '%'
	 		</if>
			<if test="opt != null and keyword != null">		
		 	<choose>
		 		<when test="opt == 'employeeNo'">
		 			and A.EMPLOYEE_NO like '%' || #{keyword} || '%'
		 		</when>
		 		<when test="opt == 'empName'">
		 			and B.EMPLOYEE_NAME	like '%' || #{keyword} || '%'
		 		</when>
		 		<when test="opt == 'dept'">
		 			and C.DEPT_NAME	like '%' || #{keyword} || '%'
		 		</when>
		 	</choose>
		 	</if>	
	 	</where>
	 	order by B.EMPLOYEE_NO asc, A.PAY_DATE desc
	</select>
	
	<!-- 급여조회 - 사원 급여 명세 가져오기 -->
	<select id="getSalaryDetailDto" parameterType="map" resultType="salaryDto">
	 	select
	 		A.EMPLOYEE_NO				as employeeNo,
	 		A.BASE_YEAR_MONTH     		as baseYearMonth,
	 		A.BASE_SALARY_TTL     		as baseSalary,
	 		A.OVERTIME_SALARY_TTL		as overtimeSalary,
	 		A.NIGHT_SALARY_TTL			as nightSalary,
	 		A.HOLIDAY_SALARY_TTL		as holidaySalary,
	 		A.CARE_SALARY_TTL			as careSalary,
	 		A.REWARD_SALARY_TTL			as rewardSalary,
	 		A.MEAL_TTL					as mealSalary,
	 		A.BUSINESS_SALARY_TTL		as businessSalary,
	 		A.INCOME_TAX_TTL			as incomeTax,
	 		A.RESIDENCE_TAX_TTL			as residenceTax,
	 		A.PENSION_TTL				as pension,
	 		A.HEALTH_INSURANCE_TTL		as healthInsurance,
	 		A.LONGTERM_INSURANCE_TTL	as longtermInsurance,
	 		A.EMPLOYMENT_INSURANCE_TTL	as employmentInsurance,
	 		A.START_DATE				as startDate,
	 		A.END_DATE					as endDate,
	 		A.PAY_DATE					as payDate,
	 		B.EMPLOYEE_NAME				as name,
	 		B.HIRE_DATE					as hireDate,
	 		B.RETIREMENT_DATE			as retirementDate,
	 		C.DEPT_NAME					as deptName
	 	from
	 		SALARY_HISTORIES A, EMPLOYEES B, DEPARTMENTS C
	 	where
	 		A.EMPLOYEE_NO = #{employeeNo}	
	 	and
	 		A.PAY_DATE = #{payDate}	
	 	and 
	 		A.EMPLOYEE_NO = B.EMPLOYEE_NO
	 	and
	 		B.DEPT_NO = C.DEPT_NO	
	</select>
	
	<!-- 기간별 급여현황 - 급여총계 -->
	<select id="getPeriodDtoLists" parameterType="map" resultType="periodDto">
	 	select
	 		B.EMPLOYEE_NO				as employeeNo,
	 		B.EMPLOYEE_NAME             as name,
	 		SUM(A.BASE_SALARY_TTL + A.OVERTIME_SALARY_TTL + A.NIGHT_SALARY_TTL + A.HOLIDAY_SALARY_TTL + A.CARE_SALARY_TTL + 
			A.REWARD_SALARY_TTL + A.MEAL_TTL + A.BUSINESS_SALARY_TTL) as totalSalary,
			SUM(A.INCOME_TAX_TTL + A.RESIDENCE_TAX_TTL + A.PENSION_TTL + A.HEALTH_INSURANCE_TTL + A.LONGTERM_INSURANCE_TTL + A.EMPLOYMENT_INSURANCE_TTL) as deductionSalary,
			SUM(A.BASE_SALARY_TTL + A.OVERTIME_SALARY_TTL + A.NIGHT_SALARY_TTL + A.HOLIDAY_SALARY_TTL + A.CARE_SALARY_TTL + A.REWARD_SALARY_TTL + A.MEAL_TTL + A.BUSINESS_SALARY_TTL)
    		- SUM(A.INCOME_TAX_TTL + A.RESIDENCE_TAX_TTL + A.PENSION_TTL + A.HEALTH_INSURANCE_TTL + A.LONGTERM_INSURANCE_TTL + A.EMPLOYMENT_INSURANCE_TTL) as realSalary
	 	from
	 		SALARY_HISTORIES A , EMPLOYEES B
	 	<where>
			A.EMPLOYEE_NO = B.EMPLOYEE_NO 
			<if test="startDate != null">
		 		and A.PAY_DATE >= #{startDate}
	 		</if>
	 		<if test="endDate != null">
		 		and	A.PAY_DATE &lt;= #{endDate}
	 		</if>
	 	</where>
	 	group by B.EMPLOYEE_NO, B.EMPLOYEE_NAME
	 	order by B.EMPLOYEE_NO
	</select>
	
	<!-- 기간별 급여현황 - 급여 상세내역 -->
	<select id="getPeriodDetails" parameterType="map" resultType="salaryDto">
		with months 
		as (select to_char(add_months(to_date(#{startDate}), level-1), 'yyyy-mm') baseYearMonth
		from dual
		connect by add_months(to_date(#{startDate}), level-1) &lt;=  to_date(#{endDate}))
		select  A.baseYearMonth baseYearMonth, 
		        nvl(B.baseSalary, 0) baseSalary, 
		        nvl(B.mealSalary, 0) mealSalary, 
		        nvl(B.overtimeSalary, 0) overtimeSalary, 
		        nvl(B.nightSalary, 0) nightSalary,
		        nvl(B.holidaySalary, 0) holidaySalary,
		        nvl(B.careSalary, 0) careSalary,
		        nvl(B.businessSalary, 0) businessSalary,
		        nvl(B.rewardSalary, 0) rewardSalary,
		        nvl(B.incomeTax, 0) incomeTax,
		        nvl(B.residenceTax, 0) residenceTax,
		        nvl(B.pension, 0) pension,
		        nvl(B.healthInsurance, 0) healthInsurance,
		        nvl(B.longtermInsurance, 0) longtermInsurance,
		        nvl(B.employmentInsurance, 0) employmentInsurance
		from months A, (select base_year_month, 
		                       sum(base_salary_ttl) baseSalary, 
		                       sum(meal_ttl) mealSalary,
		                       sum(overtime_salary_ttl) overtimeSalary, 
		                       sum(night_salary_ttl) nightSalary,
		                       sum(holiday_salary_ttl) holidaySalary,
		                       sum(care_salary_ttl) careSalary,
		                       sum(business_salary_ttl) businessSalary,
		                       sum(reward_salary_ttl) rewardSalary,
		                       sum(income_tax_ttl) incomeTax,
		                       sum(residence_tax_ttl) residenceTax,
		                       sum(pension_ttl) pension,
		                       sum(health_insurance_ttl) healthInsurance,
		                       sum(longterm_insurance_ttl) longtermInsurance,
		                       sum(employment_insurance_ttl) employmentInsurance
		                from salary_histories
		                where pay_date >= #{startDate} and pay_date &lt;= #{endDate}
		                group by base_year_month) B
		where A.baseYearMonth = B.base_year_month(+)
		order by A.baseYearMonth asc
	</select>
	
	<!-- 국민연금, 건강보험, 고용보험 기본정보 -->
	<select id="getSalaryDtoInfos" parameterType="map" resultType="salaryDto">
		select
				A.EMPLOYEE_NO  		as employeeNo,
				B.EMPLOYEE_NAME		as name,
				C.DEPT_NAME			as deptName
		from
				SALARY_HISTORIES A , EMPLOYEES B, DEPARTMENTS C
		<where>
				A.EMPLOYEE_NO = B.EMPLOYEE_NO 
			and
			    B.DEPT_NO = C.DEPT_NO	
	 		<if test="baseYear != null">
		 		and	A.PAY_DATE like '%' || #{baseYear} || '%'
	 		</if>
			<if test="opt != null and keyword != null">		
		 	<choose>
		 		<when test="opt == 'employeeNo'">
		 			and A.EMPLOYEE_NO like '%' || #{keyword} || '%'
		 		</when>
		 		<when test="opt == 'empName'">
		 			and B.EMPLOYEE_NAME	like '%' || #{keyword} || '%'
		 		</when>
		 		<when test="opt == 'dept'">
		 			and C.DEPT_NAME	like '%' || #{keyword} || '%'
		 		</when>
		 	</choose>
		 	</if>	
	 	</where>
		group by A.EMPLOYEE_NO, B.EMPLOYEE_NAME, C.DEPT_NAME
		order by A.EMPLOYEE_NO
	</select>
	 
	<!-- 국민연금, 건강보험, 고용보험 납입내역 -->
	<select id="getContributionDetails" parameterType="map" resultType="contributionDto">
		select
	 		A.EMPLOYEE_NO					as employeeNo,
	 		A.BASE_SALARY_TTL     			as baseSalary,
	 		A.OVERTIME_SALARY_TTL			as overtimeSalary,
	 		A.NIGHT_SALARY_TTL				as nightSalary,
	 		A.HOLIDAY_SALARY_TTL			as holidaySalary,
	 		A.REWARD_SALARY_TTL				as rewardSalary,
	 		A.BUSINESS_SALARY_TTL			as businessSalary,
	 		A.PENSION_TTL					as pension,
	 		A.HEALTH_INSURANCE_TTL			as healthInsurance,
	 		A.LONGTERM_INSURANCE_TTL		as longtermInsurance,
	 		A.EMPLOYMENT_INSURANCE_TTL		as employmentInsurance,
	 		A.PAY_DATE						as payDate,
	 		B.PENSION_EMPLOYEE_INSURANCE 	as pensionEmployeeRate,
	 		B.HEALTH_EMPLOYEE_INSURANCE		as healthEmployeeRate,
	 		B.LONGTERM_EMPLOYEE_INSURANCE	as longtermEmployeeRate,
	 		B.EMPLOYMENT_EMPLOYEE_INSURANCE as employmentEmployeeRate
	 	from
	 		SALARY_HISTORIES A, INSURANCE_CONTRIBUTIONS B
	 	where
	 		A.EMPLOYEE_NO = #{employeeNo}	
		and	
			A.PAY_DATE like '%' || #{baseYear} || '%'
		and
			B.BASE_YEAR = #{baseYear}	
		order by 
			A.PAY_DATE asc	
	</select>
	
</mapper>